"use strict";
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var ErrorAssertions_1 = require("../../utilities/ErrorAssertions");
var NumberUtilities_1 = require("../../utilities/NumberUtilities");
/**
 * Provides methods for constructing {@link Vector}s of a given type
 * @public
 */
var VectorBuilder = /** @class */ (function () {
    /**
     * @internal
     */
    function VectorBuilder(vectorConstructor) {
        this._vectorConstructor = vectorConstructor;
    }
    VectorBuilder.prototype.fromValues = function () {
        var data = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            data[_i] = arguments[_i];
        }
        return this.fromArray(data);
    };
    VectorBuilder.prototype.fromArray = function (data) {
        return new this._vectorConstructor(data);
    };
    VectorBuilder.prototype.fromNumberArray = function (data) {
        var ops = this.ops();
        return this.fromArray(data.map(function (num) { return ops.fromNumber(num); }));
    };
    VectorBuilder.prototype.fromSparseData = function (dimension, sparseData) {
        var data = [];
        for (var i = 0; i < dimension; i++) {
            data[i] = this.ops().zero();
        }
        sparseData.forEach(function (value, index) {
            data[index] = value;
        });
        return this.fromArray(data);
    };
    /**
     * Constructs a vector with entries given by _entry = f(i)_ where _f_ is `valueFromIndex`
     * and `i` is the index of the element
     *
     * @example
     * ```
     * vectorBuilder.fromIndexFunction(4, i => i + 3); // [ 3 4 5 6 ]
     * ```
     * @param dimension - The dimension of the vector to generate
     * @param valueFromIndex - A function returning the entry for a given index
     * @returns The new vector
     */
    VectorBuilder.prototype.fromIndexFunction = function (dimension, valueFromIndex) {
        ErrorAssertions_1.assertValidDimension(dimension);
        var data = [];
        for (var i = 0; i < dimension; i++) {
            data[i] = valueFromIndex(i);
        }
        return this.fromArray(data);
    };
    /**
     * Constructs a Vector of dimension 0
     *
     * @example
     * ```
     * vectorBuilder.empty(); // []
     * ```
     *
     * @returns The new vector
     */
    VectorBuilder.prototype.empty = function () {
        return this.fromArray([]);
    };
    /**
     * Constructs a vector whose entries are all equal to the provided value
     *
     * @example
     * ```
     * vectorBuilder.fill(3, 5); // [ 3 3 3 3 3 ]
     * ```
     *
     * @param value - The value to use as the entries of the new vector
     * @param dimension - The dimension of the new vector
     * @returns The new vector
     */
    VectorBuilder.prototype.fill = function (value, dimension) {
        ErrorAssertions_1.assertValidDimension(dimension);
        return this.fromIndexFunction(dimension, function () { return value; });
    };
    /**
     * Constructs a vector of all zeros
     *
     * @example
     * ```
     * vectorBuilder.zeros(3); // [ 0 0 0 ]
     * ```
     * @param dimension - The dimension of the vector to construct
     * @returns The new vector
     */
    VectorBuilder.prototype.zeros = function (dimension) {
        return this.fill(this.ops().zero(), dimension);
    };
    /**
     * Constructs a vector of all ones
     *
     * @example
     * ```
     * vectorBuilder.ones(3); // [ 1 1 1 ]
     * ```
     * @param dimension - The dimension of the new vector
     * @returns The new vector
     */
    VectorBuilder.prototype.ones = function (dimension) {
        return this.fill(this.ops().one(), dimension);
    };
    /**
     * Constructs a vector that has the value 1 at one index, and 0 at the others
     *
     * @example
     * ```
     * vectorBuilder.elementaryVector(4, 2); // [ 0 0 1 0 ]
     * vectorBuilder.elementaryVector(3, 0); // [ 1 0 0 ]
     * ```
     * @param dimension - The dimension of the new vector
     * @param oneIndex - The index of the element that should be the multiplicative identity
     * @returns The new vector
     */
    VectorBuilder.prototype.elementaryVector = function (dimension, oneIndex) {
        var _this = this;
        ErrorAssertions_1.assertValidDimension(dimension);
        ErrorAssertions_1.assertValidIndex(oneIndex, dimension);
        return this.fromIndexFunction(dimension, function (i) {
            return i === oneIndex ? _this.ops().one() : _this.ops().zero();
        });
    };
    /**
     * Constructs a vector whose entries match the input vector, but offset by a given amount
     *
     * @example
     * ```
     * const original = vectorBuilder.fromArray([1, 2, 3]);
     * const rightOne = vectorBuilder.rotate(original); // [2, 3, 1];
     * const rightTwo = vectorBuilder.rotate(original, 2); // [3, 1, 2];
     * const leftOne = vectorBuilder.rotate(original, 1, true); // [3, 1, 2];
     * ```
     *
     * @param vector - The vector whose entries to use
     * @param offset - The amount by which to shift the indices
     * @param reverse - Shift entries backward rather than forward
     */
    VectorBuilder.prototype.shift = function (vector, offset, reverse) {
        if (offset === void 0) { offset = 1; }
        if (reverse === void 0) { reverse = false; }
        var dim = vector.getDimension();
        return this.fromIndexFunction(dim, function (i) {
            var indexToUse = NumberUtilities_1.mod(reverse ? i - offset : i + offset, dim);
            return vector.getEntry(indexToUse);
        });
    };
    /**
     * Constructs a vector whose entries are (uniformly-distributed) random numbers
     * between `min` and `max`
     *
     * @param dimension - The dimension of the new vector
     * @param min - The lower limit of the random numbers to include
     * @param max - The upper limit of the random numbers to include
     */
    VectorBuilder.prototype.random = function (dimension, min, max) {
        var _this = this;
        if (min === void 0) { min = 0; }
        if (max === void 0) { max = 1; }
        if (min >= max) {
            throw Error("Expected min < max; got " + min + " and " + max);
        }
        return this.fromIndexFunction(dimension, function () { return _this.ops().random(min, max); });
    };
    /**
     * Constructs a vector whose entries are normally distributed, with the specified
     * mean and standard deviation
     *
     * @param dimension - The dimension of the new vector
     * @param mean - The center of the distribution of random numbers to include
     * @param standardDeviation - The standard deviation of the distribution of random numbers to include
     */
    VectorBuilder.prototype.randomNormal = function (dimension, mean, standardDeviation) {
        var _this = this;
        if (mean === void 0) { mean = 0; }
        if (standardDeviation === void 0) { standardDeviation = 1; }
        if (standardDeviation <= 0) {
            throw Error("Expected standardDeviation > 0; got " + standardDeviation);
        }
        return this.fromIndexFunction(dimension, function () {
            return _this.ops().randomNormal(mean, standardDeviation);
        });
    };
    /**
     * Constructs a vector consisting of two vectors end-to-end
     *
     * @example
     * ```
     * const first = vectorBuilder.ones(3);
     * const second = vectorBuilder.zeros(2);
     *
     * vectorBuilder.concatenate(first, second); // [ 1 1 1 0 0 ]
     * ```
     * @param first - The vector which will be used for the entries starting with index 0
     * @param second - The vector which will be used for the entries starting with `first.getDimension()`
     * @returns The new vector
     */
    VectorBuilder.prototype.concatenate = function (first, second) {
        return this.fromArray(__spreadArrays(first.toArray(), second.toArray()));
    };
    VectorBuilder.prototype.ops = function () {
        return this._vectorConstructor.ops();
    };
    return VectorBuilder;
}());
exports.VectorBuilder = VectorBuilder;
//# sourceMappingURL=VectorBuilder.js.map