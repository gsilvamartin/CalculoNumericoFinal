"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * A class which encapsulates the basic arithmetic operations for an arbitrary scalar type.
 *
 * @remarks
 * This must be implemented for each scalar to be used in a {@link Vector} or {@link Matrix}
 * @public
 */
var ScalarOperations = /** @class */ (function () {
    function ScalarOperations() {
    }
    /**
     * Returns an instance of the scalar type from its real and imaginary parts.  If the scalar
     * type does not support complex numbers, then an error will be thrown.
     * @returns The scalar
     * @public
     */
    ScalarOperations.prototype.fromComplex = function (real, imaginary) {
        if (imaginary === 0) {
            return this.fromNumber(real);
        }
        throw new Error('This scalar type does not support creation of complex numbers');
    };
    /**
     * Returns the difference of two scalars.
     *
     * @returns The difference
     * @public
     */
    ScalarOperations.prototype.subtract = function (first, second) {
        return this.add(first, this.getAdditiveInverse(second));
    };
    /**
     * Returns the quotient of two scalars `numerator` and `denominator`,
     * or `undefined` if the quotient does not exist.
     *
     * @returns The quotient
     */
    ScalarOperations.prototype.divide = function (numerator, denominator) {
        var inverseOfSecond = this.getMultiplicativeInverse(denominator);
        if (inverseOfSecond === undefined) {
            return undefined;
        }
        return this.multiply(numerator, inverseOfSecond);
    };
    /**
     * Alias for {@link ScalarOperations.getAdditiveIdentity}
     */
    ScalarOperations.prototype.zero = function () {
        return this.getAdditiveIdentity();
    };
    /**
     * Alias for {@link ScalarOperations.getMultiplicativeIdentity}
     * @public
     */
    ScalarOperations.prototype.one = function () {
        return this.getMultiplicativeIdentity();
    };
    /**
     * Returns the additive inverse of the multiplicative identity.
     *
     * @public
     */
    ScalarOperations.prototype.negativeOne = function () {
        return this.getAdditiveInverse(this.getMultiplicativeIdentity());
    };
    return ScalarOperations;
}());
exports.ScalarOperations = ScalarOperations;
//# sourceMappingURL=ScalarOperations.js.map