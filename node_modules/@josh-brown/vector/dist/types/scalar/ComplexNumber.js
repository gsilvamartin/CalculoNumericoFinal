"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var NumberUtilities_1 = require("../../utilities/NumberUtilities");
/**
 * A number of the form _a + bi_ where _i_ is the imaginary unit.
 * @public
 */
var ComplexNumber = /** @class */ (function () {
    function ComplexNumber(real, imaginary) {
        this._real = real;
        this._imaginary = imaginary;
    }
    ComplexNumber.prototype.getRealPart = function () {
        return this._real;
    };
    ComplexNumber.prototype.getImaginaryPart = function () {
        return this._imaginary;
    };
    ComplexNumber.prototype.add = function (other) {
        return new ComplexNumber(this._real + other._real, this._imaginary + other._imaginary);
    };
    ComplexNumber.prototype.multiply = function (other) {
        var ac = this._real * other._real;
        var bd = this._imaginary * other._imaginary;
        var aPlusBTimesCPlusD = (this._real + this._imaginary) * (other._real + other._imaginary);
        return new ComplexNumber(ac - bd, aPlusBTimesCPlusD - ac - bd);
    };
    ComplexNumber.prototype.getAdditiveInverse = function () {
        return this.multiply(ComplexNumber.NEG_ONE);
    };
    ComplexNumber.prototype.getMultiplicativeInverse = function () {
        var a = this.getRealPart();
        var b = this.getImaginaryPart();
        var denom = a * a + b * b;
        if (denom === 0) {
            return undefined;
        }
        var real = a / denom;
        var imag = (-1 * b) / denom;
        return new ComplexNumber(real, imag);
    };
    ComplexNumber.prototype.equals = function (other) {
        return (NumberUtilities_1.approximatelyEqual(this._real, other._real) &&
            NumberUtilities_1.approximatelyEqual(this._imaginary, other._imaginary));
    };
    ComplexNumber.prototype.conjugate = function () {
        return new ComplexNumber(this._real, -1 * this._imaginary);
    };
    ComplexNumber.ZERO = new ComplexNumber(0, 0);
    ComplexNumber.ONE = new ComplexNumber(1, 0);
    ComplexNumber.NEG_ONE = new ComplexNumber(-1, 0);
    ComplexNumber.I = new ComplexNumber(0, 1);
    return ComplexNumber;
}());
exports.ComplexNumber = ComplexNumber;
//# sourceMappingURL=ComplexNumber.js.map