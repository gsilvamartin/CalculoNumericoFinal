"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Tests if a matrix is square.
 *
 * @remarks
 * A matrix is square if it has the same number of rows as columns.
 *
 * @param matrix - The matrix to check
 * @returns `true` if `matrix` is square
 * @public
 */
function isSquare(matrix) {
    return matrix.getNumberOfColumns() === matrix.getNumberOfRows();
}
exports.isSquare = isSquare;
/**
 * Tests if a matrix is upper-triangular.
 *
 * @remarks
 * A matrix is upper-triangular if all entries below the primary diagonal
 * (those where `i > j`) are zero.
 *
 * @returns `true` if the matrix is upper-triangular
 * @public
 */
function isUpperTriangular(matrix) {
    var ops = matrix.ops();
    var isUT = true;
    matrix.forEach(function (entry, i, j) {
        if (i > j && !ops.equals(ops.zero(), entry)) {
            isUT = false;
        }
    });
    return isUT;
}
exports.isUpperTriangular = isUpperTriangular;
/**
 * Tests if a matrix is lower-triangular.
 *
 * @remarks
 * A matrix is lower-triangular if all entries above the primary diagonal
 * (those where `i < j`) are zero.
 *
 * @returns `true` if the matrix is lower-triangular
 * @public
 */
function isLowerTriangular(matrix) {
    var ops = matrix.ops();
    var isLT = true;
    matrix.forEach(function (entry, i, j) {
        if (i < j && !ops.equals(ops.zero(), entry)) {
            isLT = false;
        }
    });
    return isLT;
}
exports.isLowerTriangular = isLowerTriangular;
/**
 * Tests if a matrix is symmetric.
 *
 * @remarks
 * A matrix A is symmetric if it is square and if A[i,j] = A[j,i] for all i and j
 *
 * @returns `true` if the matrix is symmetric
 * @public
 */
function isSymmetric(matrix) {
    if (!isSquare(matrix))
        return false;
    var ops = matrix.ops();
    var dim = matrix.getNumberOfColumns();
    for (var i = 0; i < dim; i++) {
        for (var j = i; j < dim; j++) {
            if (!ops.equals(matrix.getEntry(i, j), matrix.getEntry(j, i))) {
                return false;
            }
        }
    }
    return true;
}
exports.isSymmetric = isSymmetric;
/**
 * Tests if a matrix is Hermitian.
 *
 * @remarks
 * A matrix A is Hermitian if it is equal to its conjugate transpose
 *
 * @returns `true` if the matrix is Hermitian
 * @public
 */
function isHermitian(matrix) {
    if (!isSquare(matrix))
        return false;
    var ops = matrix.ops();
    var dim = matrix.getNumberOfColumns();
    for (var i = 0; i < dim; i++) {
        for (var j = i; j < dim; j++) {
            if (!ops.equals(matrix.getEntry(i, j), ops.conjugate(matrix.getEntry(j, i)))) {
                return false;
            }
        }
    }
    return true;
}
exports.isHermitian = isHermitian;
/**
 * Tests if a matrix is an identity matrix
 *
 * @returns `true` if the matrix is an identity
 * @public
 */
function isIdentity(matrix) {
    // Constructing an identity matrix and calling .equals would
    // be easier to code, but would use much more memory
    if (!isSquare(matrix))
        return false;
    var ops = matrix.ops();
    var dim = matrix.getNumberOfColumns();
    for (var i = 0; i < dim; i++) {
        for (var j = i; j < dim; j++) {
            if (i === j) {
                if (!ops.equals(matrix.getEntry(i, j), ops.one())) {
                    return false; // Diagonal entries must be 1
                }
            }
            else {
                if (!ops.equals(matrix.getEntry(i, j), ops.zero())) {
                    return false; // Non-diagonal entries must be 0
                }
            }
        }
    }
    return true;
}
exports.isIdentity = isIdentity;
/**
 * Tests if a matrix is orthogonal
 *
 * @remarks
 * A matrix is orthogonal if each column is orthogonal to each other column.
 * That is, if for each pair of columns, their inner product is 0.
 *
 * @returns `true` if the matrix is orthogonal.
 * @public
 */
function isOrthogonal(matrix) {
    var ops = matrix.ops();
    var cols = matrix.getColumnVectors();
    for (var _i = 0, cols_1 = cols; _i < cols_1.length; _i++) {
        var col = cols_1[_i];
        for (var _a = 0, cols_2 = cols; _a < cols_2.length; _a++) {
            var other = cols_2[_a];
            if (col === other)
                continue;
            if (!ops.equals(col.innerProduct(other), ops.zero())) {
                return false;
            }
        }
    }
    return true;
}
exports.isOrthogonal = isOrthogonal;
/**
 * Tests if a matrix is orthonormal
 *
 * @remarks
 * A matrix is orthonormal if is {@link isOrthogonal | orthogonal} and
 * if its columns all have norm 1.
 * An orthonormal matrix multiplied by its transpose is an identity.
 *
 * @returns `true` if the matrix is orthonormal
 * @public
 */
function isOrthonormal(matrix) {
    var multipliedByOwnTranspose = matrix.multiply(matrix.transpose());
    return isIdentity(multipliedByOwnTranspose);
}
exports.isOrthonormal = isOrthonormal;
//# sourceMappingURL=MatrixProperties.js.map