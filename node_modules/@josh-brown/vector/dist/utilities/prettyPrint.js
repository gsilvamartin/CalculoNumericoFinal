"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function prettyPrint(input) {
    if (typeof input === 'number') {
        return prettyPrintNumber(input);
    }
    var isVector = !!input.innerProduct;
    if (isVector) {
        return prettyPrintVector(input);
    }
    else {
        return prettyPrintMatrix(input);
    }
}
exports.prettyPrint = prettyPrint;
function prettyPrintNumber(num) {
    var str = num.toString();
    var fixed = num.toFixed(6);
    return str.length > fixed.length ? fixed : str;
}
function prettyPrintVector(vector) {
    var ops = vector.ops();
    var width = getPrintWidth(vector);
    var prettyData = vector.toArray().map(function (val) { return ops.prettyPrint(val); });
    return prettyData.map(function (value) { return '[ ' + spaces(width - value.length) + value + ' ]'; }).join('\n');
}
function prettyPrintMatrix(matrix) {
    var ops = matrix.ops();
    var widthByCol = matrix.getColumnVectors().map(function (col) { return getPrintWidth(col); });
    var prettyData = matrix.toArray().map(function (rowArr) { return rowArr.map(function (val) { return ops.prettyPrint(val); }); });
    return prettyData
        .map(function (rowArr) {
        return '[ ' +
            rowArr.map(function (val, colIndex) { return spaces(widthByCol[colIndex] - val.length) + val; }).join('  ') +
            ' ]';
    })
        .join('\n');
}
function getPrintWidth(v) {
    return v
        .toArray()
        .map(function (val) { return v.ops().prettyPrint(val); })
        .map(function (str) { return str.length; })
        .reduce(function (max, curr) { return (curr > max ? curr : max); }, 0);
}
function spaces(n) {
    var sp = '';
    for (var i = 0; i < n; i++) {
        sp = sp + ' ';
    }
    return sp;
}
//# sourceMappingURL=prettyPrint.js.map