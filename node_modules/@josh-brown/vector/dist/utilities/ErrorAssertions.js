"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Throws an error of the 2d array `data` is not rectangular - i.e. if
 * all of its rows do not have the same length
 */
function assertRectangular(data, message) {
    message = message || "Expected arrays of uniform length; got " + data;
    if (data.length === 0) {
        return;
    }
    var rowSize = data[0].length;
    for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {
        var row = data_1[_i];
        if (row.length !== rowSize) {
            throw Error(message);
        }
    }
}
exports.assertRectangular = assertRectangular;
/**
 * Throws an error if `matrix` is not square
 */
function assertSquare(matrix, message) {
    var _a = matrix.getShape(), rows = _a[0], cols = _a[1];
    message = message || "Expected a square matrix; got " + rows + "x" + cols;
    if (rows !== cols) {
        throw new Error(message);
    }
}
exports.assertSquare = assertSquare;
/**
 * Throws an error if any member of `vectors` has a different length
 * from any other member.
 */
function assertHomogeneous(vectors, message) {
    message =
        message ||
            "Expected vectors all to have the same dimension; got " + vectors.map(function (v) { return v.getDimension(); });
    if (vectors.length === 0) {
        return;
    }
    var size = vectors[0].getDimension();
    for (var _i = 0, vectors_1 = vectors; _i < vectors_1.length; _i++) {
        var vector = vectors_1[_i];
        if (vector.getDimension() !== size) {
            throw Error(message);
        }
    }
}
exports.assertHomogeneous = assertHomogeneous;
/**
 * Throws an error if empty
 */
function assertNonEmpty(values, message) {
    message = message || "Expected a nonempty array; got []";
    if (values.length > 0) {
        return;
    }
    throw Error(message);
}
exports.assertNonEmpty = assertNonEmpty;
/**
 * Throws an error if `dimension` is negative
 */
function assertValidDimension(dimension, message) {
    message = message || "Expected dimension to be nonnegative; got " + dimension;
    if (dimension < 0) {
        throw Error(message);
    }
}
exports.assertValidDimension = assertValidDimension;
function assertMultiplicable(first, second, message) {
    message =
        message ||
            "Dimension mismatch: expected dimensions compatible with matrix multiplication; got " + shape(first) + " and " + shape(second);
    if (first.getNumberOfColumns() !== second.getNumberOfRows()) {
        throw Error(message);
    }
}
exports.assertMultiplicable = assertMultiplicable;
/**
 * Throws an error if either dimension is negative, or if only one dimension is nonzero.
 */
function assertValidShape(shape, message) {
    var m = shape[0], n = shape[1];
    message = message || "Expected valid matrix dimensions; got " + m + "x" + n;
    assertValidDimension(m, message);
    assertValidDimension(n, message);
    if ((m !== 0 && n === 0) || (m === 0 && n !== 0)) {
        throw Error(message);
    }
}
exports.assertValidShape = assertValidShape;
/**
 * Throws an error if `index` is not a valid identifier for an entry in `vector`
 */
function assertValidVectorIndex(vector, index, message) {
    assertValidIndex(index, vector.getDimension(), message);
}
exports.assertValidVectorIndex = assertValidVectorIndex;
/**
 * Throws an error if `(rowIndex, colIndex)` is not a valid identifier for an entry in `matrix`
 */
function assertValidMatrixIndex(matrix, rowIndex, colIndex, message) {
    var _a = matrix.getShape(), rows = _a[0], cols = _a[1];
    message =
        message ||
            "Expected indices between (0, 0) and (" + (rows - 1) + ", " + (cols -
                1) + "); got (" + rowIndex + ", " + colIndex + ")";
    assertValidIndex(rowIndex, rows, message);
    assertValidIndex(colIndex, cols, message);
}
exports.assertValidMatrixIndex = assertValidMatrixIndex;
/**
 * Throws an error if `index` is not a valid index for an array-like object of length `size`
 */
function assertValidIndex(index, size, message) {
    message = message || "Expected an index between 0 and " + (size - 1) + "; got " + index;
    if (index < 0 || index >= size) {
        throw Error(message);
    }
}
exports.assertValidIndex = assertValidIndex;
function assertDimensionMatch(first, second, message) {
    var _a = first.getShape(), m1 = _a[0], n1 = _a[1];
    var _b = second.getShape(), m2 = _b[0], n2 = _b[1];
    message = message || "Expected matching dimensions; got " + shape(first) + " and " + shape(second);
    if (m1 !== m2 || n1 !== n2) {
        throw Error(message);
    }
}
exports.assertDimensionMatch = assertDimensionMatch;
function shape(matrix) {
    var _a = matrix.getShape(), m = _a[0], n = _a[1];
    return "(" + m + "x" + n + ")";
}
//# sourceMappingURL=ErrorAssertions.js.map