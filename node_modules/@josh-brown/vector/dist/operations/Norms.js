"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var aliases_1 = require("../utilities/aliases");
/**
 * Returns a vector with the same direction as the input `v`, but with a Euclidean norm of 1
 *
 * @example
 * ```
 * const v = vec(3, 4);
 * const normalized = normalize(v); // [ 0.6, 0.8 ]
 * ```
 *
 * @param v - The vector to normalize
 * @public
 */
function normalize(v) {
    var ops = v.ops();
    var scaleFactor = ops.getMultiplicativeInverse(ops.fromNumber(euclideanNorm(v)));
    return scaleFactor === undefined ? undefined : v.scalarMultiply(scaleFactor);
}
exports.normalize = normalize;
/**
 * Calculates the P-Norm of a vector `v`
 *
 * @example
 * ```
 * const v = vec([3, 4]);
 * const norm1 = pNorm(v, 1); // 7
 * const norm2 = pNorm(v, 2); // 5
 * const norm3 = pNorm(v, 3); // 4.49794...
 * ```
 *
 * @param v - The vector for which to calculate the norm
 * @param p - The power used to calculate the norm
 * @public
 */
function pNorm(v, p) {
    if (p < 1) {
        throw Error("The p-norm is only defined for p >= 1; got " + p);
    }
    if (v.getDimension() === 0) {
        return 0;
    }
    var ops = v.ops();
    var terms = v.toArray().map(ops.norm);
    if (p > 1) {
        terms = terms.map(function (term) { return Math.abs(Math.pow(term, p)); });
    }
    var sum = terms.reduce(function (a, b) { return a + b; }, 0);
    return p > 1 ? Math.pow(sum, 1 / p) : sum;
}
exports.pNorm = pNorm;
/**
 * Calculates the Sum Norm (or 1-Norm) of a vector `v`
 *
 * @example
 * ```
 * const v = vec([3, 4]);
 * const norm = sumNorm(v); // 7
 * ```
 *
 * @param v - The vector for which to calculate the norm
 * @public
 */
function sumNorm(v) {
    return pNorm(v, 1);
}
exports.sumNorm = sumNorm;
/**
 * Calculates the Euclidean Norm (or 2-Norm) of a vector `v`
 *
 * @example
 * ```
 * const v = vec([3, 4]);
 * const norm = euclideanNorm(v); // 5
 * ```
 *
 * @param v - The vector for which to calculate the norm
 * @public
 */
function euclideanNorm(v) {
    return pNorm(v, 2);
}
exports.euclideanNorm = euclideanNorm;
/**
 * Calculates the Supremum Norm (or Infinity-Norm) of a vector `v`
 *
 * @example
 * ```
 * const v = vec([3, 4]);
 * const norm = supremumNorm(v); // 4
 * ```
 *
 * @param v - The vector for which to calculate the norm
 * @public
 */
function supremumNorm(v) {
    if (v.getDimension() === 0) {
        return 0;
    }
    var ops = v.ops();
    var entries = v.toArray().map(ops.norm);
    var max;
    entries.forEach(function (entry) {
        if (max === undefined || entry > max) {
            max = entry;
        }
    });
    return max; // cannot be undefined
}
exports.supremumNorm = supremumNorm;
/**
 * Calculates the Frobenius Norm of a matrix `A`
 *
 * @example
 * ```
 * const A = mat([[1, 2], [3, 4]]);
 * const norm = frobeniusNorm(A); // sqrt(30)
 * ```
 *
 * @param A - The matrix for which to calculate the norm
 * @public
 */
function frobeniusNorm(A) {
    var vb = A.vectorBuilder();
    var allEntries = A.getColumnVectors().reduce(function (all, next) { return vb.concatenate(all, next); }, vb.empty());
    return euclideanNorm(allEntries);
}
exports.frobeniusNorm = frobeniusNorm;
/**
 * Calculates the 1-Norm of a matrix `A`
 *
 * @example
 * ```
 * const A = mat([[1, 2], [3, 4]]);
 * const norm = columnSumSupremumNorm(A); // 6
 * ```
 *
 * @param A - The matrix for which to calculate the norm
 * @public
 */
function columnSumSupremumNorm(A) {
    var columnSums = A.getColumnVectors().map(sumNorm);
    var columnSumVector = aliases_1.vec(columnSums);
    return supremumNorm(columnSumVector);
}
exports.columnSumSupremumNorm = columnSumSupremumNorm;
/**
 * Calculates the Infinity-Norm of a matrix `A`
 *
 * @example
 * ```
 * const A = mat([[1, 2], [3, 4]]);
 * const norm = rowSumSupremumNorm(A); // 7
 * ```
 *
 * @param A - The matrix for which to calculate the norm
 * @public
 */
function rowSumSupremumNorm(A) {
    var rowSums = A.getRowVectors().map(sumNorm);
    var rowSumVector = aliases_1.vec(rowSums);
    return supremumNorm(rowSumVector);
}
exports.rowSumSupremumNorm = rowSumSupremumNorm;
//# sourceMappingURL=Norms.js.map